// Author: R34lQu1ck
// Version: 1.0

////////////////////
//      UTILS     //
////////////////////
crypto = include_lib("/lib/crypto.so")
SH = get_shell
OS = SH.host_computer

LOGGER = {}
LOGGER.info = function (message)
	print("<color=#0088FF>" + message + "</color>")
end function

LOGGER.success = function (message)
	print("<color=#00FF88>" + message + "</color>")
end function

LOGGER.warning = function (message)
	print("<color=#FF8800>" + message + "</color>")
end function

LOGGER.error = function (message)
	print("<color=#FF0000>" + message + "</color>")
end function


////////////////////
//     PROGRAM    //
////////////////////
LOGGER.info("<b><i><color=#880088>R34lQu1ck</color></i> WIFI CRACKER UTILITY<b>")
LOGGER.info("Welcome! Please use this tool with caution!")
LOGGER.warning("Disclaimer: This tool is intended to be used for learning or testing purposes only, the author will not be held responsible for any illegal or dubious use of it.")



// List all network devices and filter only wlan cards
all_devices = OS.network_devices.split(char(10))
wlan_devices = []
for device in all_devices
	if device[0:4] == "wlan" then
		wlan_devices.push(device.split(" ")[0])
	end if
end for



// If there is no wlan adapter found the program exits
if wlan_devices.len == 0 then
	LOGGER.error("No wlan adapters were found. Exiting...")
	exit
end if



// If there is only one adapter we use it, else we list and select one
selection = -1
if wlan_devices.len == 1 then
	selection = 0
end if

while selection < 0
	question = "Select a network adapter:" + char(10)
	i = 0
	for device in wlan_devices
		question = question + "[<color=#00FF88>" + i + "</color>] <color=#0088FF>" + device + "</color>" + char(10)
		i = i + 1
	end for
	question = question + "Option: "
	selection = user_input(question).to_int
	
	if typeof(selection) == "string" or selection >= wifi_devices.len then
		LOGGER.error("Invalid selection")
		selection = -1
	end if
end while

chosen_device = wlan_devices[selection]
LOGGER.info("Using network adapter " + chosen_device)



// Activate monitor mode in selected card
LOGGER.info("Activating monitor mode...")
crypto.airmon("start", chosen_device)



// Ask for minimum wifi signal strength
wifi_power_options = [40, 50, 60, 70, 80]
selection = -1
while selection < 0
	question = "Select the minimum wifi signal strength required: " + char(10)
	i = 0
	for op in wifi_power_options
		question = question + "[<color=#00FF88>" + i + "</color>] <color=#0088FF>" + op + "%</color>" + char(10)
		i = i + 1
	end for
	question = question + "Option: "
	selection = user_input(question).to_int
	
	if typeof(selection) == "string" or selection >= wifi_power_options.len then
		LOGGER.error("Invalid selection")
		selection = -1
	end if
end while

min_power = wifi_power_options[selection]
LOGGER.info("Filtering networks with signal strength greater or equal than " + min_power + "%...")



// Start cracking attempts for all networks above selected signal strength
LOGGER.info("Starting process...")
LOGGER.warning("WARN: this may take a few minutes, please be patient.")

networks = OS.wifi_networks(chosen_device)
results = "ESSID PASSWORD" + char(10)
for network in networks
	values = network.split(" ")
	bssid = values[0]
	power = values[1].split("%")[0].to_int
	essid = values[2]
	
	if power < min_power then
		continue
	end if

	LOGGER.info("Attempting to crack: " + essid + "...")
	crypto.aireplay(bssid, essid, 7000)
	
	LOGGER.info("Looking for network password...")
	wait(5)
	
	capfile = OS.File(current_path + "/file.cap")
	
	password = crypto.aircrack(capfile.path)
	
	results = results + essid + " "
	if password == null then
		results = results + "<FAILED TO GET PASSWORD>"
		LOGGER.error("Password not found")
	else
		results = results + password
		LOGGER.success("Password found!")
	end if

	results = results + char(10)
	
	capfile.delete
	wait(2)
end for



// Write results and stop monitor mode in chosen device
i = 0
create_result = 0
while create_result != 1
	new_file_name = "wifi_passwords_" + i + ".txt"
	create_result = OS.touch(current_path, new_file_name)
	
	if create_result == 1 then
		results_file = OS.File(current_path + "/" + new_file_name)
		results_file.set_content(results)

		crypto.airmon("stop", chosen_device)
		LOGGER.success("Success! find results in " + results_file.name)
	else
		i = i + 1
	end if
end while
